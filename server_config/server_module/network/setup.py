#!/usr/bin/env python3
"""
Network Configuration Module

Handles:
- Interface configuration
- Hostname setup
- /etc/hosts management
"""

from ..utils import run_cmd, backup_file, check_root
from ..config import DEFAULT_NETWORK
from typing import Dict, Optional, Tuple
import os

class NetworkConfig:
    def __init__(self):
        self.hostname = DEFAULT_NETWORK.hostname
        self.fqdn = DEFAULT_NETWORK.fqdn
        self.domain = DEFAULT_NETWORK.domain
        self.server_ip = DEFAULT_NETWORK.server_ip
        self.client_ip = DEFAULT_NETWORK.client_ip

    def configure_interfaces(self, interface: str = None) -> Dict:
        """Configure network interfaces"""
        interface = interface or DEFAULT_NETWORK.interface
        print(f"\nConfiguring interface {interface}...")
        
        # Get current IP
        success, ip_output = run_cmd(
            f"ip -o -4 addr show {interface} | awk '{{print $4}}' | head -1 | cut -d'/' -f1"
        )
        if not success:
            raise Exception(f"Could not determine IP for {interface}")
        
        current_ip = ip_output.strip()
        
        # Generate config file
        config = f"""# Generated by server_module
DEVICE={interface}
BOOTPROTO=static
IPADDR={current_ip}
NETMASK=255.255.255.0
ONBOOT=yes
"""
        config_path = f"/etc/sysconfig/network-scripts/ifcfg-{interface}"
        
        # Backup existing config
        backup_file(config_path)
        
        # Write new config
        with open(config_path, "w") as f:
            f.write(config)
        
        print(f"Interface {interface} configured with IP {current_ip}")
        return {
            "interface": interface,
            "ip_address": current_ip,
            "config_path": config_path
        }

    def set_hostname(self, hostname: str = None) -> str:
        """Set system hostname"""
        hostname = hostname or self.fqdn
        print(f"\nSetting hostname to {hostname}...")
        
        run_cmd(f"hostnamectl set-hostname {hostname}", sudo=True)
        self.hostname = hostname.split('.')[0]
        self.fqdn = hostname
        
        print(f"Hostname set to {hostname}")
        return hostname

    def update_hosts_file(self) -> bool:
        """Update /etc/hosts with server and client entries"""
        print("\nUpdating /etc/hosts file...")
        
        # Backup current file
        backup_file("/etc/hosts")
        
        # Build new content
        new_content = f"""127.0.0.1   localhost localhost.localdomain
{self.server_ip}   {self.fqdn} {self.hostname}
{self.client_ip}   {self.hostname.replace('srv', 'clt')}.{self.domain}
"""
        # Write new file
        with open("/etc/hosts", "w") as f:
            f.write(new_content)
        
        print("/etc/hosts updated successfully")
        return True

    def restart_network(self) -> bool:
        """Restart network services"""
        print("\nRestarting network services...")
        run_cmd("systemctl restart NetworkManager", sudo=True)
        print("Network services restarted")
        return True

    def configure(self) -> Dict:
        """Run complete network configuration"""
        check_root()
        interface_config = self.configure_interfaces()
        self.set_hostname()
        self.update_hosts_file()
        self.restart_network()
        return interface_config

# Module-level functions
def configure_interfaces(interface: str = None) -> Dict:
    """Configure network interfaces"""
    return NetworkConfig().configure_interfaces(interface)

def set_hostname(hostname: str) -> str:
    """Set system hostname"""
    return NetworkConfig().set_hostname(hostname)

def update_hosts_file() -> bool:
    """Update /etc/hosts"""
    return NetworkConfig().update_hosts_file()